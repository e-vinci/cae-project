{"pageProps":{"frontmatter":{"title":"Intro","description":"Introduction to this course","date":"20/01/2025","body":{"raw":"\n<InternalPageMenu>\n  <PathViewer>\n    <PathViewerItem to=\"/\"> CAE </PathViewerItem>\n    <PathViewerItem to=\"/intro\"> Introduction </PathViewerItem>\n  </PathViewer>\n  <InternalPageMenuItem> Qu'est-ce que l'on attend d'une application d'entreprise ? </InternalPageMenuItem>\n  <InternalPageMenuItem> Qu'est-ce que les développeurs attendent d'une application d'entreprise ? </InternalPageMenuItem>\n   <InternalPageMenuItem> Qu'est-ce qu'une architecture 3-tiers ? </InternalPageMenuItem>\n    <InternalPageMenuItem> Comment augmenter la scalabilité de la base de données ? </InternalPageMenuItem>\n  \n</InternalPageMenu>\n\n# <InternalPageTitle> Qu'est-ce que l'on attend d'une application d'entreprise ? </InternalPageTitle>\n\nUne application d'entreprise doit répondre à plusieurs critères pour être considérée comme efficace et utile. La qualité est un aspect transversal qui apparaît dans plusieurs de ces critères. Voici quelques attentes courantes :\n\n1. **Fiabilité** : L'application doit être stable et fonctionner correctement sans erreurs fréquentes. La qualité du code et des tests contribue grandement à la fiabilité.\n2. **Scalabilité et performance** : Elle doit pouvoir gérer une augmentation du nombre d'utilisateurs et de données sans perte de performance. Une architecture bien conçue et une optimisation continue sont des aspects clés de la qualité.\n3. **Sécurité** : La protection des données sensibles et la prévention des accès non autorisés sont essentielles. La qualité des mécanismes de sécurité intégrés dans l'application est cruciale.\n4. **Facilité d'utilisation** : Une interface utilisateur intuitive et une bonne expérience utilisateur sont cruciales. La qualité de la conception UX/UI joue un rôle important ici.\n5. **Intégration et maintenance** : Elle doit pouvoir s'intégrer facilement avec d'autres systèmes et services utilisés par l'entreprise et être facile à maintenir et à mettre à jour. La qualité de la documentation et du code facilite l'intégration et la maintenance.\n\nCes critères sont essentiels pour garantir que l'application répond aux besoins de l'entreprise et de ses utilisateurs tout en maintenant un haut niveau de performance et de sécurité.\n\n# <InternalPageTitle> Qu'est-ce que les développeurs attendent d'une application d'entreprise ? </InternalPageTitle>\n\nLes développeurs ont également des attentes spécifiques lorsqu'ils travaillent sur des applications d'entreprise. Voici quelques-unes de leurs attentes courantes :\n\n1. **Code propre et bien structuré** : Les développeurs attendent un code qui soit facile à lire, à comprendre et à maintenir. Un code propre et bien structuré facilite les modifications et les ajouts de nouvelles fonctionnalités.\n2. **Documentation complète** : Une documentation claire et complète est essentielle pour comprendre le fonctionnement de l'application et pour faciliter le développement et la maintenance.\n3. **Outils et environnements de développement** : Les développeurs attendent des outils et des environnements de développement efficaces qui les aident à être productifs. Cela inclut des IDE, des systèmes de gestion de versions, des outils de débogage et des environnements de test.\n4. **Tests automatisés** : Les tests automatisés sont cruciaux pour garantir la qualité du code et pour détecter les régressions rapidement. Les développeurs attendent une suite de tests complète qui couvre les différentes parties de l'application.\n5. **Collaboration et communication** : Les développeurs attendent des processus et des outils qui facilitent la collaboration et la communication au sein de l'équipe. Cela inclut des systèmes de gestion de projet, des outils de communication et des pratiques de développement collaboratif comme le code review.\n\nCes attentes sont essentielles pour garantir que les développeurs peuvent travailler efficacement et produire un code de haute qualité.\n\n# <InternalPageTitle> Quelles architectures possibles pour une application d'entreprise ? </InternalPageTitle>\n\nIl existe plusieurs architectures possibles pour concevoir une application d'entreprise, chacune ayant ses propres avantages et inconvénients. Voici quelques-unes des principales architectures :\n\n1. **Architecture monolithique** : Toutes les fonctionnalités de l'application sont regroupées dans un seul et même codebase. Cette architecture est simple à mettre en place mais peut devenir difficile à maintenir et à faire évoluer à mesure que l'application grandit.\n2. **Architecture en couches (Layered Architecture)** : L'application est divisée en couches logiques (présentation, logique métier, accès aux données, etc.). Chaque couche a une responsabilité spécifique et communique avec les autres couches via des interfaces bien définies.\n3. **Microservices** : Une évolution de l'architecture orientée services (SOA) où chaque service est déployé indépendamment et peut être développé, testé et déployé de manière autonome. Cette architecture favorise la scalabilité et la résilience, mais peut introduire une complexité supplémentaire en termes de gestion et de communication entre services.\n4. **Architecture événementielle (Event-Driven Architecture)** : L'application est basée sur la production, la détection et la consommation d'événements. Les composants de l'application réagissent aux événements en temps réel, ce qui permet une grande flexibilité et une réactivité accrue.\n5. **Architecture serverless** : L'application est déployée sur une infrastructure cloud où les ressources sont allouées dynamiquement en fonction des besoins. Les développeurs n'ont pas à gérer les serveurs, ce qui permet de se concentrer sur le code métier. Cette architecture peut réduire les coûts et améliorer la scalabilité.\n\n\nCes architectures offrent différentes approches pour concevoir des applications d'entreprise robustes, évolutives et maintenables. Le choix de l'architecture dépend des besoins spécifiques de l'entreprise et des contraintes techniques du projet.\n\n# <InternalPageTitle> Qu'est-ce qu'une architecture 3-tiers ? </InternalPageTitle>\n\n## Généralités\nL'architecture 3-tiers est une architecture classique et éprouvée pour les applications d'entreprise. Elle divise l'application en trois couches distinctes :\n\n1. **Présentation** : Cette couche est responsable de l'interface utilisateur et de l'expérience utilisateur. Dans le cadre de ce cours, nous utiliserons React pour créer une Single Page Application (SPA) qui offre une interface utilisateur dynamique et réactive.\n2. **Logique métier** : Cette couche contient la logique métier de l'application. Elle traite les requêtes de la couche de présentation et interagit avec la couche de données. Nous utiliserons Spring pour créer une API REST qui gère la logique métier et expose des endpoints pour les opérations CRUD.\n3. **Accès aux données** : Cette couche est responsable de la gestion des données. Elle interagit avec la base de données pour stocker, récupérer et manipuler les données. Spring Data peut être utilisé pour simplifier l'accès aux données et les opérations de base de données.\n\n## Pourquoi l'architecture 3-tiers est un bon choix pour une application d'entreprise ?\n\n- **Séparation des préoccupations** : En divisant l'application en trois couches distinctes, chaque couche peut se concentrer sur une responsabilité spécifique, ce qui facilite la maintenance et l'évolution de l'application.\n- **Scalabilité** : Chaque couche peut être mise à l'échelle indépendamment en fonction des besoins. Par exemple, la couche de présentation peut être mise à l'échelle horizontalement pour gérer un grand nombre d'utilisateurs, tandis que la couche de données peut être optimisée pour les performances de la base de données.\n- **Flexibilité** : L'architecture 3-tiers permet de remplacer ou de mettre à jour une couche sans affecter les autres couches. Par exemple, vous pouvez remplacer la couche de présentation par une nouvelle technologie sans modifier la logique métier ou l'accès aux données.\n- **Sécurité** : En isolant la logique métier et l'accès aux données de la couche de présentation, il est plus facile de mettre en œuvre des mesures de sécurité pour protéger les données sensibles et prévenir les accès non autorisés.\n\n## Application de l'architecture 3-tiers à notre projet\n\n<PlantUML src=\"/diagrams/3-tier-arch.puml\" alt=\"Architecture 3-tiers\"/>\n\n## Quels avantages concrets de cette architecture ?\n\n- Nouveau frontend ? Pas de problème, on peut le changer sans toucher au backend. Je crée une app mobile ? Pas de problème, je peux réutiliser le backend.\n- Nouvelle base de données ? Pas de problème, on peut la changer sans toucher au frontend.\n- Nouvelle API ? Pas de problème, on peut la changer sans toucher au frontend.\n\nScalabilité ? \n- On peut mettre à l'échelle chaque couche indépendamment.\n- API REST : pas de session, donc facile à mettre à l'échelle horizontalement. Si on a besoin de plus de puissance, on peut ajouter des instances de l'API REST derrière un simple load balancer.\nComme il n'y a pas de session, on ne doit pas retenir avec quelle instance un utilisateur est connecté.\n\n# <InternalPageTitle> Comment augmenter la scalabilité de la base de données ? </InternalPageTitle>\n\nPour augmenter la capacité de la base de données, plusieurs stratégies peuvent être mises en œuvre :\n\n1. **Scaling vertical (Scale-up)** :\n   - Augmenter les ressources matérielles du serveur de base de données, telles que la mémoire RAM, le CPU et le stockage. Cela permet à la base de données de gérer plus de requêtes et de stocker plus de données.\n   - Cette approche est simple à mettre en œuvre mais a des limites physiques et peut devenir coûteuse.\n\n2. **Scaling horizontal (Scale-out)** :\n   - **Sharding** : Diviser la base de données en plusieurs fragments (shards), chaque fragment étant stocké sur un serveur différent. Chaque shard contient une partie des données, ce qui permet de répartir la charge de travail.\n   - **Réplication** : Créer des copies de la base de données sur plusieurs serveurs. Les lectures peuvent être réparties entre les réplicas pour améliorer les performances, tandis que les écritures sont généralement dirigées vers le serveur principal (master).\n   - **Bases de données distribuées** : Utiliser des bases de données distribuées comme Apache Cassandra, MongoDB ou Amazon DynamoDB, qui sont conçues pour gérer de grandes quantités de données et de trafic en répartissant les données sur plusieurs nœuds.\n\n3. **Optimisation des requêtes et des index** :\n   - **Indexation** : Créer des index sur les colonnes fréquemment utilisées dans les requêtes pour accélérer les opérations de lecture.\n   - **Optimisation des requêtes** : Analyser et optimiser les requêtes SQL pour réduire le temps d'exécution et la charge sur la base de données.\n   - **Caching** : Utiliser des mécanismes de mise en cache pour stocker les résultats des requêtes fréquemment exécutées, réduisant ainsi la charge sur la base de données.\n\n4. **Partitionnement des tables** :\n   - Diviser les grandes tables en partitions plus petites basées sur des critères spécifiques (par exemple, la date, l'ID utilisateur). Cela permet d'améliorer les performances des requêtes en réduisant la quantité de données à scanner.\n\nCes stratégies peuvent être combinées pour répondre aux besoins spécifiques de l'application et garantir une base de données performante et évolutive.\n\n","code":"var Component=(()=>{var v=Object.create;var a=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var q=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var C=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),P=(t,e)=>{for(var r in e)a(t,r,{get:e[r],enumerable:!0})},d=(t,e,r,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of q(e))!x.call(t,i)&&i!==r&&a(t,i,{get:()=>e[i],enumerable:!(s=f(e,i))||s.enumerable});return t};var L=(t,e,r)=>(r=t!=null?v(b(t)):{},d(e||!t||!t.__esModule?a(r,\"default\",{value:t,enumerable:!0}):r,t)),I=t=>d(a({},\"__esModule\",{value:!0}),t);var h=C((j,p)=>{p.exports=_jsx_runtime});var S={};P(S,{default:()=>g,frontmatter:()=>A});var n=L(h()),A={title:\"Intro\",description:\"Introduction to this course\",date:\"20/01/2025\"};function m(t){let e={h1:\"h1\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",strong:\"strong\",ul:\"ul\",...t.components},{InternalPageMenu:r,InternalPageMenuItem:s,InternalPageTitle:i,PathViewer:o,PathViewerItem:c,PlantUML:u}=e;return r||l(\"InternalPageMenu\",!0),s||l(\"InternalPageMenuItem\",!0),i||l(\"InternalPageTitle\",!0),o||l(\"PathViewer\",!0),c||l(\"PathViewerItem\",!0),u||l(\"PlantUML\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r,{children:[(0,n.jsxs)(o,{children:[(0,n.jsx)(c,{to:\"/\",children:\" CAE \"}),(0,n.jsx)(c,{to:\"/intro\",children:\" Introduction \"})]}),(0,n.jsx)(s,{children:\" Qu'est-ce que l'on attend d'une application d'entreprise ? \"}),(0,n.jsx)(s,{children:\" Qu'est-ce que les d\\xE9veloppeurs attendent d'une application d'entreprise ? \"}),(0,n.jsx)(s,{children:\" Qu'est-ce qu'une architecture 3-tiers ? \"}),(0,n.jsx)(s,{children:\" Comment augmenter la scalabilit\\xE9 de la base de donn\\xE9es ? \"})]}),`\n`,(0,n.jsx)(e.h1,{children:(0,n.jsx)(i,{children:\" Qu'est-ce que l'on attend d'une application d'entreprise ? \"})}),`\n`,(0,n.jsx)(e.p,{children:\"Une application d'entreprise doit r\\xE9pondre \\xE0 plusieurs crit\\xE8res pour \\xEAtre consid\\xE9r\\xE9e comme efficace et utile. La qualit\\xE9 est un aspect transversal qui appara\\xEEt dans plusieurs de ces crit\\xE8res. Voici quelques attentes courantes :\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Fiabilit\\xE9\"}),\" : L'application doit \\xEAtre stable et fonctionner correctement sans erreurs fr\\xE9quentes. La qualit\\xE9 du code et des tests contribue grandement \\xE0 la fiabilit\\xE9.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Scalabilit\\xE9 et performance\"}),\" : Elle doit pouvoir g\\xE9rer une augmentation du nombre d'utilisateurs et de donn\\xE9es sans perte de performance. Une architecture bien con\\xE7ue et une optimisation continue sont des aspects cl\\xE9s de la qualit\\xE9.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"S\\xE9curit\\xE9\"}),\" : La protection des donn\\xE9es sensibles et la pr\\xE9vention des acc\\xE8s non autoris\\xE9s sont essentielles. La qualit\\xE9 des m\\xE9canismes de s\\xE9curit\\xE9 int\\xE9gr\\xE9s dans l'application est cruciale.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Facilit\\xE9 d'utilisation\"}),\" : Une interface utilisateur intuitive et une bonne exp\\xE9rience utilisateur sont cruciales. La qualit\\xE9 de la conception UX/UI joue un r\\xF4le important ici.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Int\\xE9gration et maintenance\"}),\" : Elle doit pouvoir s'int\\xE9grer facilement avec d'autres syst\\xE8mes et services utilis\\xE9s par l'entreprise et \\xEAtre facile \\xE0 maintenir et \\xE0 mettre \\xE0 jour. La qualit\\xE9 de la documentation et du code facilite l'int\\xE9gration et la maintenance.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Ces crit\\xE8res sont essentiels pour garantir que l'application r\\xE9pond aux besoins de l'entreprise et de ses utilisateurs tout en maintenant un haut niveau de performance et de s\\xE9curit\\xE9.\"}),`\n`,(0,n.jsx)(e.h1,{children:(0,n.jsx)(i,{children:\" Qu'est-ce que les d\\xE9veloppeurs attendent d'une application d'entreprise ? \"})}),`\n`,(0,n.jsx)(e.p,{children:\"Les d\\xE9veloppeurs ont \\xE9galement des attentes sp\\xE9cifiques lorsqu'ils travaillent sur des applications d'entreprise. Voici quelques-unes de leurs attentes courantes :\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Code propre et bien structur\\xE9\"}),\" : Les d\\xE9veloppeurs attendent un code qui soit facile \\xE0 lire, \\xE0 comprendre et \\xE0 maintenir. Un code propre et bien structur\\xE9 facilite les modifications et les ajouts de nouvelles fonctionnalit\\xE9s.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Documentation compl\\xE8te\"}),\" : Une documentation claire et compl\\xE8te est essentielle pour comprendre le fonctionnement de l'application et pour faciliter le d\\xE9veloppement et la maintenance.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Outils et environnements de d\\xE9veloppement\"}),\" : Les d\\xE9veloppeurs attendent des outils et des environnements de d\\xE9veloppement efficaces qui les aident \\xE0 \\xEAtre productifs. Cela inclut des IDE, des syst\\xE8mes de gestion de versions, des outils de d\\xE9bogage et des environnements de test.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Tests automatis\\xE9s\"}),\" : Les tests automatis\\xE9s sont cruciaux pour garantir la qualit\\xE9 du code et pour d\\xE9tecter les r\\xE9gressions rapidement. Les d\\xE9veloppeurs attendent une suite de tests compl\\xE8te qui couvre les diff\\xE9rentes parties de l'application.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Collaboration et communication\"}),\" : Les d\\xE9veloppeurs attendent des processus et des outils qui facilitent la collaboration et la communication au sein de l'\\xE9quipe. Cela inclut des syst\\xE8mes de gestion de projet, des outils de communication et des pratiques de d\\xE9veloppement collaboratif comme le code review.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Ces attentes sont essentielles pour garantir que les d\\xE9veloppeurs peuvent travailler efficacement et produire un code de haute qualit\\xE9.\"}),`\n`,(0,n.jsx)(e.h1,{children:(0,n.jsx)(i,{children:\" Quelles architectures possibles pour une application d'entreprise ? \"})}),`\n`,(0,n.jsx)(e.p,{children:\"Il existe plusieurs architectures possibles pour concevoir une application d'entreprise, chacune ayant ses propres avantages et inconv\\xE9nients. Voici quelques-unes des principales architectures :\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Architecture monolithique\"}),\" : Toutes les fonctionnalit\\xE9s de l'application sont regroup\\xE9es dans un seul et m\\xEAme codebase. Cette architecture est simple \\xE0 mettre en place mais peut devenir difficile \\xE0 maintenir et \\xE0 faire \\xE9voluer \\xE0 mesure que l'application grandit.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Architecture en couches (Layered Architecture)\"}),\" : L'application est divis\\xE9e en couches logiques (pr\\xE9sentation, logique m\\xE9tier, acc\\xE8s aux donn\\xE9es, etc.). Chaque couche a une responsabilit\\xE9 sp\\xE9cifique et communique avec les autres couches via des interfaces bien d\\xE9finies.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Microservices\"}),\" : Une \\xE9volution de l'architecture orient\\xE9e services (SOA) o\\xF9 chaque service est d\\xE9ploy\\xE9 ind\\xE9pendamment et peut \\xEAtre d\\xE9velopp\\xE9, test\\xE9 et d\\xE9ploy\\xE9 de mani\\xE8re autonome. Cette architecture favorise la scalabilit\\xE9 et la r\\xE9silience, mais peut introduire une complexit\\xE9 suppl\\xE9mentaire en termes de gestion et de communication entre services.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Architecture \\xE9v\\xE9nementielle (Event-Driven Architecture)\"}),\" : L'application est bas\\xE9e sur la production, la d\\xE9tection et la consommation d'\\xE9v\\xE9nements. Les composants de l'application r\\xE9agissent aux \\xE9v\\xE9nements en temps r\\xE9el, ce qui permet une grande flexibilit\\xE9 et une r\\xE9activit\\xE9 accrue.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Architecture serverless\"}),\" : L'application est d\\xE9ploy\\xE9e sur une infrastructure cloud o\\xF9 les ressources sont allou\\xE9es dynamiquement en fonction des besoins. Les d\\xE9veloppeurs n'ont pas \\xE0 g\\xE9rer les serveurs, ce qui permet de se concentrer sur le code m\\xE9tier. Cette architecture peut r\\xE9duire les co\\xFBts et am\\xE9liorer la scalabilit\\xE9.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Ces architectures offrent diff\\xE9rentes approches pour concevoir des applications d'entreprise robustes, \\xE9volutives et maintenables. Le choix de l'architecture d\\xE9pend des besoins sp\\xE9cifiques de l'entreprise et des contraintes techniques du projet.\"}),`\n`,(0,n.jsx)(e.h1,{children:(0,n.jsx)(i,{children:\" Qu'est-ce qu'une architecture 3-tiers ? \"})}),`\n`,(0,n.jsx)(e.h2,{children:\"G\\xE9n\\xE9ralit\\xE9s\"}),`\n`,(0,n.jsx)(e.p,{children:\"L'architecture 3-tiers est une architecture classique et \\xE9prouv\\xE9e pour les applications d'entreprise. Elle divise l'application en trois couches distinctes :\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Pr\\xE9sentation\"}),\" : Cette couche est responsable de l'interface utilisateur et de l'exp\\xE9rience utilisateur. Dans le cadre de ce cours, nous utiliserons React pour cr\\xE9er une Single Page Application (SPA) qui offre une interface utilisateur dynamique et r\\xE9active.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Logique m\\xE9tier\"}),\" : Cette couche contient la logique m\\xE9tier de l'application. Elle traite les requ\\xEAtes de la couche de pr\\xE9sentation et interagit avec la couche de donn\\xE9es. Nous utiliserons Spring pour cr\\xE9er une API REST qui g\\xE8re la logique m\\xE9tier et expose des endpoints pour les op\\xE9rations CRUD.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Acc\\xE8s aux donn\\xE9es\"}),\" : Cette couche est responsable de la gestion des donn\\xE9es. Elle interagit avec la base de donn\\xE9es pour stocker, r\\xE9cup\\xE9rer et manipuler les donn\\xE9es. Spring Data peut \\xEAtre utilis\\xE9 pour simplifier l'acc\\xE8s aux donn\\xE9es et les op\\xE9rations de base de donn\\xE9es.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Pourquoi l'architecture 3-tiers est un bon choix pour une application d'entreprise ?\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"S\\xE9paration des pr\\xE9occupations\"}),\" : En divisant l'application en trois couches distinctes, chaque couche peut se concentrer sur une responsabilit\\xE9 sp\\xE9cifique, ce qui facilite la maintenance et l'\\xE9volution de l'application.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Scalabilit\\xE9\"}),\" : Chaque couche peut \\xEAtre mise \\xE0 l'\\xE9chelle ind\\xE9pendamment en fonction des besoins. Par exemple, la couche de pr\\xE9sentation peut \\xEAtre mise \\xE0 l'\\xE9chelle horizontalement pour g\\xE9rer un grand nombre d'utilisateurs, tandis que la couche de donn\\xE9es peut \\xEAtre optimis\\xE9e pour les performances de la base de donn\\xE9es.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Flexibilit\\xE9\"}),\" : L'architecture 3-tiers permet de remplacer ou de mettre \\xE0 jour une couche sans affecter les autres couches. Par exemple, vous pouvez remplacer la couche de pr\\xE9sentation par une nouvelle technologie sans modifier la logique m\\xE9tier ou l'acc\\xE8s aux donn\\xE9es.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"S\\xE9curit\\xE9\"}),\" : En isolant la logique m\\xE9tier et l'acc\\xE8s aux donn\\xE9es de la couche de pr\\xE9sentation, il est plus facile de mettre en \\u0153uvre des mesures de s\\xE9curit\\xE9 pour prot\\xE9ger les donn\\xE9es sensibles et pr\\xE9venir les acc\\xE8s non autoris\\xE9s.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Application de l'architecture 3-tiers \\xE0 notre projet\"}),`\n`,(0,n.jsx)(u,{src:\"/diagrams/3-tier-arch.puml\",alt:\"Architecture 3-tiers\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Quels avantages concrets de cette architecture ?\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Nouveau frontend ? Pas de probl\\xE8me, on peut le changer sans toucher au backend. Je cr\\xE9e une app mobile ? Pas de probl\\xE8me, je peux r\\xE9utiliser le backend.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Nouvelle base de donn\\xE9es ? Pas de probl\\xE8me, on peut la changer sans toucher au frontend.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Nouvelle API ? Pas de probl\\xE8me, on peut la changer sans toucher au frontend.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Scalabilit\\xE9 ?\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"On peut mettre \\xE0 l'\\xE9chelle chaque couche ind\\xE9pendamment.\"}),`\n`,(0,n.jsx)(e.li,{children:`API REST : pas de session, donc facile \\xE0 mettre \\xE0 l'\\xE9chelle horizontalement. Si on a besoin de plus de puissance, on peut ajouter des instances de l'API REST derri\\xE8re un simple load balancer.\nComme il n'y a pas de session, on ne doit pas retenir avec quelle instance un utilisateur est connect\\xE9.`}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{children:(0,n.jsx)(i,{children:\" Comment augmenter la scalabilit\\xE9 de la base de donn\\xE9es ? \"})}),`\n`,(0,n.jsx)(e.p,{children:\"Pour augmenter la capacit\\xE9 de la base de donn\\xE9es, plusieurs strat\\xE9gies peuvent \\xEAtre mises en \\u0153uvre :\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Scaling vertical (Scale-up)\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Augmenter les ressources mat\\xE9rielles du serveur de base de donn\\xE9es, telles que la m\\xE9moire RAM, le CPU et le stockage. Cela permet \\xE0 la base de donn\\xE9es de g\\xE9rer plus de requ\\xEAtes et de stocker plus de donn\\xE9es.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Cette approche est simple \\xE0 mettre en \\u0153uvre mais a des limites physiques et peut devenir co\\xFBteuse.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Scaling horizontal (Scale-out)\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Sharding\"}),\" : Diviser la base de donn\\xE9es en plusieurs fragments (shards), chaque fragment \\xE9tant stock\\xE9 sur un serveur diff\\xE9rent. Chaque shard contient une partie des donn\\xE9es, ce qui permet de r\\xE9partir la charge de travail.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"R\\xE9plication\"}),\" : Cr\\xE9er des copies de la base de donn\\xE9es sur plusieurs serveurs. Les lectures peuvent \\xEAtre r\\xE9parties entre les r\\xE9plicas pour am\\xE9liorer les performances, tandis que les \\xE9critures sont g\\xE9n\\xE9ralement dirig\\xE9es vers le serveur principal (master).\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Bases de donn\\xE9es distribu\\xE9es\"}),\" : Utiliser des bases de donn\\xE9es distribu\\xE9es comme Apache Cassandra, MongoDB ou Amazon DynamoDB, qui sont con\\xE7ues pour g\\xE9rer de grandes quantit\\xE9s de donn\\xE9es et de trafic en r\\xE9partissant les donn\\xE9es sur plusieurs n\\u0153uds.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Optimisation des requ\\xEAtes et des index\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Indexation\"}),\" : Cr\\xE9er des index sur les colonnes fr\\xE9quemment utilis\\xE9es dans les requ\\xEAtes pour acc\\xE9l\\xE9rer les op\\xE9rations de lecture.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Optimisation des requ\\xEAtes\"}),\" : Analyser et optimiser les requ\\xEAtes SQL pour r\\xE9duire le temps d'ex\\xE9cution et la charge sur la base de donn\\xE9es.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Caching\"}),\" : Utiliser des m\\xE9canismes de mise en cache pour stocker les r\\xE9sultats des requ\\xEAtes fr\\xE9quemment ex\\xE9cut\\xE9es, r\\xE9duisant ainsi la charge sur la base de donn\\xE9es.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Partitionnement des tables\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Diviser les grandes tables en partitions plus petites bas\\xE9es sur des crit\\xE8res sp\\xE9cifiques (par exemple, la date, l'ID utilisateur). Cela permet d'am\\xE9liorer les performances des requ\\xEAtes en r\\xE9duisant la quantit\\xE9 de donn\\xE9es \\xE0 scanner.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Ces strat\\xE9gies peuvent \\xEAtre combin\\xE9es pour r\\xE9pondre aux besoins sp\\xE9cifiques de l'application et garantir une base de donn\\xE9es performante et \\xE9volutive.\"})]})}function g(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(m,{...t})}):m(t)}function l(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return I(S);})();\n;return Component;"},"_id":"intro.mdx","_raw":{"sourceFilePath":"intro.mdx","sourceFileName":"intro.mdx","sourceFileDir":".","contentType":"mdx","flattenedPath":"intro"},"type":"Page"},"body":"var Component=(()=>{var v=Object.create;var a=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var q=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var C=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),P=(t,e)=>{for(var r in e)a(t,r,{get:e[r],enumerable:!0})},d=(t,e,r,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of q(e))!x.call(t,i)&&i!==r&&a(t,i,{get:()=>e[i],enumerable:!(s=f(e,i))||s.enumerable});return t};var L=(t,e,r)=>(r=t!=null?v(b(t)):{},d(e||!t||!t.__esModule?a(r,\"default\",{value:t,enumerable:!0}):r,t)),I=t=>d(a({},\"__esModule\",{value:!0}),t);var h=C((j,p)=>{p.exports=_jsx_runtime});var S={};P(S,{default:()=>g,frontmatter:()=>A});var n=L(h()),A={title:\"Intro\",description:\"Introduction to this course\",date:\"20/01/2025\"};function m(t){let e={h1:\"h1\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",strong:\"strong\",ul:\"ul\",...t.components},{InternalPageMenu:r,InternalPageMenuItem:s,InternalPageTitle:i,PathViewer:o,PathViewerItem:c,PlantUML:u}=e;return r||l(\"InternalPageMenu\",!0),s||l(\"InternalPageMenuItem\",!0),i||l(\"InternalPageTitle\",!0),o||l(\"PathViewer\",!0),c||l(\"PathViewerItem\",!0),u||l(\"PlantUML\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r,{children:[(0,n.jsxs)(o,{children:[(0,n.jsx)(c,{to:\"/\",children:\" CAE \"}),(0,n.jsx)(c,{to:\"/intro\",children:\" Introduction \"})]}),(0,n.jsx)(s,{children:\" Qu'est-ce que l'on attend d'une application d'entreprise ? \"}),(0,n.jsx)(s,{children:\" Qu'est-ce que les d\\xE9veloppeurs attendent d'une application d'entreprise ? \"}),(0,n.jsx)(s,{children:\" Qu'est-ce qu'une architecture 3-tiers ? \"}),(0,n.jsx)(s,{children:\" Comment augmenter la scalabilit\\xE9 de la base de donn\\xE9es ? \"})]}),`\n`,(0,n.jsx)(e.h1,{children:(0,n.jsx)(i,{children:\" Qu'est-ce que l'on attend d'une application d'entreprise ? \"})}),`\n`,(0,n.jsx)(e.p,{children:\"Une application d'entreprise doit r\\xE9pondre \\xE0 plusieurs crit\\xE8res pour \\xEAtre consid\\xE9r\\xE9e comme efficace et utile. La qualit\\xE9 est un aspect transversal qui appara\\xEEt dans plusieurs de ces crit\\xE8res. Voici quelques attentes courantes :\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Fiabilit\\xE9\"}),\" : L'application doit \\xEAtre stable et fonctionner correctement sans erreurs fr\\xE9quentes. La qualit\\xE9 du code et des tests contribue grandement \\xE0 la fiabilit\\xE9.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Scalabilit\\xE9 et performance\"}),\" : Elle doit pouvoir g\\xE9rer une augmentation du nombre d'utilisateurs et de donn\\xE9es sans perte de performance. Une architecture bien con\\xE7ue et une optimisation continue sont des aspects cl\\xE9s de la qualit\\xE9.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"S\\xE9curit\\xE9\"}),\" : La protection des donn\\xE9es sensibles et la pr\\xE9vention des acc\\xE8s non autoris\\xE9s sont essentielles. La qualit\\xE9 des m\\xE9canismes de s\\xE9curit\\xE9 int\\xE9gr\\xE9s dans l'application est cruciale.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Facilit\\xE9 d'utilisation\"}),\" : Une interface utilisateur intuitive et une bonne exp\\xE9rience utilisateur sont cruciales. La qualit\\xE9 de la conception UX/UI joue un r\\xF4le important ici.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Int\\xE9gration et maintenance\"}),\" : Elle doit pouvoir s'int\\xE9grer facilement avec d'autres syst\\xE8mes et services utilis\\xE9s par l'entreprise et \\xEAtre facile \\xE0 maintenir et \\xE0 mettre \\xE0 jour. La qualit\\xE9 de la documentation et du code facilite l'int\\xE9gration et la maintenance.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Ces crit\\xE8res sont essentiels pour garantir que l'application r\\xE9pond aux besoins de l'entreprise et de ses utilisateurs tout en maintenant un haut niveau de performance et de s\\xE9curit\\xE9.\"}),`\n`,(0,n.jsx)(e.h1,{children:(0,n.jsx)(i,{children:\" Qu'est-ce que les d\\xE9veloppeurs attendent d'une application d'entreprise ? \"})}),`\n`,(0,n.jsx)(e.p,{children:\"Les d\\xE9veloppeurs ont \\xE9galement des attentes sp\\xE9cifiques lorsqu'ils travaillent sur des applications d'entreprise. Voici quelques-unes de leurs attentes courantes :\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Code propre et bien structur\\xE9\"}),\" : Les d\\xE9veloppeurs attendent un code qui soit facile \\xE0 lire, \\xE0 comprendre et \\xE0 maintenir. Un code propre et bien structur\\xE9 facilite les modifications et les ajouts de nouvelles fonctionnalit\\xE9s.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Documentation compl\\xE8te\"}),\" : Une documentation claire et compl\\xE8te est essentielle pour comprendre le fonctionnement de l'application et pour faciliter le d\\xE9veloppement et la maintenance.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Outils et environnements de d\\xE9veloppement\"}),\" : Les d\\xE9veloppeurs attendent des outils et des environnements de d\\xE9veloppement efficaces qui les aident \\xE0 \\xEAtre productifs. Cela inclut des IDE, des syst\\xE8mes de gestion de versions, des outils de d\\xE9bogage et des environnements de test.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Tests automatis\\xE9s\"}),\" : Les tests automatis\\xE9s sont cruciaux pour garantir la qualit\\xE9 du code et pour d\\xE9tecter les r\\xE9gressions rapidement. Les d\\xE9veloppeurs attendent une suite de tests compl\\xE8te qui couvre les diff\\xE9rentes parties de l'application.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Collaboration et communication\"}),\" : Les d\\xE9veloppeurs attendent des processus et des outils qui facilitent la collaboration et la communication au sein de l'\\xE9quipe. Cela inclut des syst\\xE8mes de gestion de projet, des outils de communication et des pratiques de d\\xE9veloppement collaboratif comme le code review.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Ces attentes sont essentielles pour garantir que les d\\xE9veloppeurs peuvent travailler efficacement et produire un code de haute qualit\\xE9.\"}),`\n`,(0,n.jsx)(e.h1,{children:(0,n.jsx)(i,{children:\" Quelles architectures possibles pour une application d'entreprise ? \"})}),`\n`,(0,n.jsx)(e.p,{children:\"Il existe plusieurs architectures possibles pour concevoir une application d'entreprise, chacune ayant ses propres avantages et inconv\\xE9nients. Voici quelques-unes des principales architectures :\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Architecture monolithique\"}),\" : Toutes les fonctionnalit\\xE9s de l'application sont regroup\\xE9es dans un seul et m\\xEAme codebase. Cette architecture est simple \\xE0 mettre en place mais peut devenir difficile \\xE0 maintenir et \\xE0 faire \\xE9voluer \\xE0 mesure que l'application grandit.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Architecture en couches (Layered Architecture)\"}),\" : L'application est divis\\xE9e en couches logiques (pr\\xE9sentation, logique m\\xE9tier, acc\\xE8s aux donn\\xE9es, etc.). Chaque couche a une responsabilit\\xE9 sp\\xE9cifique et communique avec les autres couches via des interfaces bien d\\xE9finies.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Microservices\"}),\" : Une \\xE9volution de l'architecture orient\\xE9e services (SOA) o\\xF9 chaque service est d\\xE9ploy\\xE9 ind\\xE9pendamment et peut \\xEAtre d\\xE9velopp\\xE9, test\\xE9 et d\\xE9ploy\\xE9 de mani\\xE8re autonome. Cette architecture favorise la scalabilit\\xE9 et la r\\xE9silience, mais peut introduire une complexit\\xE9 suppl\\xE9mentaire en termes de gestion et de communication entre services.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Architecture \\xE9v\\xE9nementielle (Event-Driven Architecture)\"}),\" : L'application est bas\\xE9e sur la production, la d\\xE9tection et la consommation d'\\xE9v\\xE9nements. Les composants de l'application r\\xE9agissent aux \\xE9v\\xE9nements en temps r\\xE9el, ce qui permet une grande flexibilit\\xE9 et une r\\xE9activit\\xE9 accrue.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Architecture serverless\"}),\" : L'application est d\\xE9ploy\\xE9e sur une infrastructure cloud o\\xF9 les ressources sont allou\\xE9es dynamiquement en fonction des besoins. Les d\\xE9veloppeurs n'ont pas \\xE0 g\\xE9rer les serveurs, ce qui permet de se concentrer sur le code m\\xE9tier. Cette architecture peut r\\xE9duire les co\\xFBts et am\\xE9liorer la scalabilit\\xE9.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Ces architectures offrent diff\\xE9rentes approches pour concevoir des applications d'entreprise robustes, \\xE9volutives et maintenables. Le choix de l'architecture d\\xE9pend des besoins sp\\xE9cifiques de l'entreprise et des contraintes techniques du projet.\"}),`\n`,(0,n.jsx)(e.h1,{children:(0,n.jsx)(i,{children:\" Qu'est-ce qu'une architecture 3-tiers ? \"})}),`\n`,(0,n.jsx)(e.h2,{children:\"G\\xE9n\\xE9ralit\\xE9s\"}),`\n`,(0,n.jsx)(e.p,{children:\"L'architecture 3-tiers est une architecture classique et \\xE9prouv\\xE9e pour les applications d'entreprise. Elle divise l'application en trois couches distinctes :\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Pr\\xE9sentation\"}),\" : Cette couche est responsable de l'interface utilisateur et de l'exp\\xE9rience utilisateur. Dans le cadre de ce cours, nous utiliserons React pour cr\\xE9er une Single Page Application (SPA) qui offre une interface utilisateur dynamique et r\\xE9active.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Logique m\\xE9tier\"}),\" : Cette couche contient la logique m\\xE9tier de l'application. Elle traite les requ\\xEAtes de la couche de pr\\xE9sentation et interagit avec la couche de donn\\xE9es. Nous utiliserons Spring pour cr\\xE9er une API REST qui g\\xE8re la logique m\\xE9tier et expose des endpoints pour les op\\xE9rations CRUD.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Acc\\xE8s aux donn\\xE9es\"}),\" : Cette couche est responsable de la gestion des donn\\xE9es. Elle interagit avec la base de donn\\xE9es pour stocker, r\\xE9cup\\xE9rer et manipuler les donn\\xE9es. Spring Data peut \\xEAtre utilis\\xE9 pour simplifier l'acc\\xE8s aux donn\\xE9es et les op\\xE9rations de base de donn\\xE9es.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Pourquoi l'architecture 3-tiers est un bon choix pour une application d'entreprise ?\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"S\\xE9paration des pr\\xE9occupations\"}),\" : En divisant l'application en trois couches distinctes, chaque couche peut se concentrer sur une responsabilit\\xE9 sp\\xE9cifique, ce qui facilite la maintenance et l'\\xE9volution de l'application.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Scalabilit\\xE9\"}),\" : Chaque couche peut \\xEAtre mise \\xE0 l'\\xE9chelle ind\\xE9pendamment en fonction des besoins. Par exemple, la couche de pr\\xE9sentation peut \\xEAtre mise \\xE0 l'\\xE9chelle horizontalement pour g\\xE9rer un grand nombre d'utilisateurs, tandis que la couche de donn\\xE9es peut \\xEAtre optimis\\xE9e pour les performances de la base de donn\\xE9es.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Flexibilit\\xE9\"}),\" : L'architecture 3-tiers permet de remplacer ou de mettre \\xE0 jour une couche sans affecter les autres couches. Par exemple, vous pouvez remplacer la couche de pr\\xE9sentation par une nouvelle technologie sans modifier la logique m\\xE9tier ou l'acc\\xE8s aux donn\\xE9es.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"S\\xE9curit\\xE9\"}),\" : En isolant la logique m\\xE9tier et l'acc\\xE8s aux donn\\xE9es de la couche de pr\\xE9sentation, il est plus facile de mettre en \\u0153uvre des mesures de s\\xE9curit\\xE9 pour prot\\xE9ger les donn\\xE9es sensibles et pr\\xE9venir les acc\\xE8s non autoris\\xE9s.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Application de l'architecture 3-tiers \\xE0 notre projet\"}),`\n`,(0,n.jsx)(u,{src:\"/diagrams/3-tier-arch.puml\",alt:\"Architecture 3-tiers\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Quels avantages concrets de cette architecture ?\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Nouveau frontend ? Pas de probl\\xE8me, on peut le changer sans toucher au backend. Je cr\\xE9e une app mobile ? Pas de probl\\xE8me, je peux r\\xE9utiliser le backend.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Nouvelle base de donn\\xE9es ? Pas de probl\\xE8me, on peut la changer sans toucher au frontend.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Nouvelle API ? Pas de probl\\xE8me, on peut la changer sans toucher au frontend.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Scalabilit\\xE9 ?\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"On peut mettre \\xE0 l'\\xE9chelle chaque couche ind\\xE9pendamment.\"}),`\n`,(0,n.jsx)(e.li,{children:`API REST : pas de session, donc facile \\xE0 mettre \\xE0 l'\\xE9chelle horizontalement. Si on a besoin de plus de puissance, on peut ajouter des instances de l'API REST derri\\xE8re un simple load balancer.\nComme il n'y a pas de session, on ne doit pas retenir avec quelle instance un utilisateur est connect\\xE9.`}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{children:(0,n.jsx)(i,{children:\" Comment augmenter la scalabilit\\xE9 de la base de donn\\xE9es ? \"})}),`\n`,(0,n.jsx)(e.p,{children:\"Pour augmenter la capacit\\xE9 de la base de donn\\xE9es, plusieurs strat\\xE9gies peuvent \\xEAtre mises en \\u0153uvre :\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Scaling vertical (Scale-up)\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Augmenter les ressources mat\\xE9rielles du serveur de base de donn\\xE9es, telles que la m\\xE9moire RAM, le CPU et le stockage. Cela permet \\xE0 la base de donn\\xE9es de g\\xE9rer plus de requ\\xEAtes et de stocker plus de donn\\xE9es.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Cette approche est simple \\xE0 mettre en \\u0153uvre mais a des limites physiques et peut devenir co\\xFBteuse.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Scaling horizontal (Scale-out)\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Sharding\"}),\" : Diviser la base de donn\\xE9es en plusieurs fragments (shards), chaque fragment \\xE9tant stock\\xE9 sur un serveur diff\\xE9rent. Chaque shard contient une partie des donn\\xE9es, ce qui permet de r\\xE9partir la charge de travail.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"R\\xE9plication\"}),\" : Cr\\xE9er des copies de la base de donn\\xE9es sur plusieurs serveurs. Les lectures peuvent \\xEAtre r\\xE9parties entre les r\\xE9plicas pour am\\xE9liorer les performances, tandis que les \\xE9critures sont g\\xE9n\\xE9ralement dirig\\xE9es vers le serveur principal (master).\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Bases de donn\\xE9es distribu\\xE9es\"}),\" : Utiliser des bases de donn\\xE9es distribu\\xE9es comme Apache Cassandra, MongoDB ou Amazon DynamoDB, qui sont con\\xE7ues pour g\\xE9rer de grandes quantit\\xE9s de donn\\xE9es et de trafic en r\\xE9partissant les donn\\xE9es sur plusieurs n\\u0153uds.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Optimisation des requ\\xEAtes et des index\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Indexation\"}),\" : Cr\\xE9er des index sur les colonnes fr\\xE9quemment utilis\\xE9es dans les requ\\xEAtes pour acc\\xE9l\\xE9rer les op\\xE9rations de lecture.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Optimisation des requ\\xEAtes\"}),\" : Analyser et optimiser les requ\\xEAtes SQL pour r\\xE9duire le temps d'ex\\xE9cution et la charge sur la base de donn\\xE9es.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Caching\"}),\" : Utiliser des m\\xE9canismes de mise en cache pour stocker les r\\xE9sultats des requ\\xEAtes fr\\xE9quemment ex\\xE9cut\\xE9es, r\\xE9duisant ainsi la charge sur la base de donn\\xE9es.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Partitionnement des tables\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Diviser les grandes tables en partitions plus petites bas\\xE9es sur des crit\\xE8res sp\\xE9cifiques (par exemple, la date, l'ID utilisateur). Cela permet d'am\\xE9liorer les performances des requ\\xEAtes en r\\xE9duisant la quantit\\xE9 de donn\\xE9es \\xE0 scanner.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Ces strat\\xE9gies peuvent \\xEAtre combin\\xE9es pour r\\xE9pondre aux besoins sp\\xE9cifiques de l'application et garantir une base de donn\\xE9es performante et \\xE9volutive.\"})]})}function g(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(m,{...t})}):m(t)}function l(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return I(S);})();\n;return Component;"},"__N_SSG":true}
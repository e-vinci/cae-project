{"pageProps":{"frontmatter":{"title":"Qualité générale","description":"Qualité générale des applications d'entreprise","date":"20/01/2025","body":{"raw":"\n<InternalPageMenu>\n  <PathViewer>\n    <PathViewerItem to=\"/\"> CAE </PathViewerItem>\n    <PathViewerItem to=\"/quality\"> Qualité </PathViewerItem>\n    <PathViewerItem selected> Qualité générale </PathViewerItem>\n  </PathViewer>\n  <InternalPageMenuItem> Comment gérer la qualité des applications d'entreprise ? </InternalPageMenuItem>\n  <InternalPageMenuItem> Quels sont les différents types de tests ? </InternalPageMenuItem>\n  <InternalPageMenuItem> Quels tests réaliser pour le Projet CAE ? </InternalPageMenuItem>\n</InternalPageMenu>\n\n\n# <InternalPageTitle> Comment gérer la qualité des applications d'entreprise ? </InternalPageTitle>\n\nLa gestion de la qualité des applications d'entreprise est essentielle pour garantir leur fiabilité, performance et sécurité. Voici quelques pratiques clés pour gérer la qualité :\n\n1. **Intégration Continue (CI)** :\n   - **Automatisation des tests** : Utiliser des outils de CI pour automatiser l'exécution des tests unitaires, d'intégration et fonctionnels à chaque **modification significative** du code. Cela permet de détecter rapidement les régressions et les erreurs.\n   - **Build automatisé** : Configurer des pipelines de build automatisés pour compiler et tester le code à chaque commit ou chaque push. Cela garantit que le code est toujours dans un état déployable.\n   - **Analyse de code statique** : Intégrer des outils d'analyse de code statique pour vérifier la qualité du code, détecter les vulnérabilités de sécurité et appliquer les normes de codage.\n\n2. **Déploiement Continu (CD)** :\n   - **Automatisation du déploiement** : Utiliser des pipelines de CD pour automatiser le déploiement des applications dans différents environnements (développement, test ou staging, production). Cela réduit les erreurs humaines et accélère le processus de déploiement.\n   - **Déploiements incrémentiels** : Mettre en œuvre des stratégies de déploiement incrémentiel, telles que les déploiements vers deux environnements (staging & production), pour minimiser les risques et assurer une transition en douceur vers les nouvelles versions. \n   Par exemple, on ne déploie pas directement en production, mais on déploie d'abord en staging, on teste, et si tout est OK, on déploie en production.\n   - **Surveillance et feedback** : Mettre en place des outils de surveillance pour suivre les performances et la disponibilité des applications en production. Utiliser les feedbacks pour identifier et résoudre rapidement les problèmes.\n\n3. **Revue de code et collaboration** :\n   - **Revue de code** : Encourager les revues de code entre pairs pour améliorer la qualité du code, partager les connaissances et détecter les problèmes potentiels avant qu'ils n'atteignent la production.\n   - **Collaboration** : Utiliser des outils de gestion de projet et de collaboration pour faciliter la communication entre les équipes de développement, de test et d'exploitation.\n\n4. **Documentation et formation** :\n   - **Documentation** : Maintenir une documentation à jour sur les processus de développement, les normes de codage, les configurations des environnements et les procédures de déploiement.\n   - **Formation continue** : Offrir des formations régulières aux développeurs sur les meilleures pratiques de développement, les nouvelles technologies et les outils de qualité.\n\nEn mettant en œuvre ces pratiques, les entreprises peuvent améliorer la qualité de leurs applications, réduire les risques et assurer une livraison continue de valeur à leurs utilisateurs.\n\n# <InternalPageTitle> Quels sont les différents types de tests ? </InternalPageTitle>\n\nLes tests sont une composante essentielle de la gestion de la qualité des applications d'entreprise. Voici les différents types de tests couramment utilisés dans le développement logiciel :\n\n1. **Tests unitaires** :\n   - Ces tests vérifient le bon fonctionnement des plus petites unités de code, comme les fonctions ou les méthodes. Ils sont généralement écrits par les développeurs et exécutés fréquemment pour détecter les régressions rapidement.\n\n2. **Tests d'intégration** :\n   - Ces tests vérifient que les différentes unités de code fonctionnent correctement ensemble. Ils sont utilisés pour détecter les problèmes d'interaction entre les modules ou les composants.\n\n3. **Tests de bout en bout (E2E)** :\n   - Ces tests vérifient le bon fonctionnement de l'application dans son ensemble, du début à la fin. Ils simulent les actions des utilisateurs et vérifient que toutes les parties de l'application fonctionnent correctement ensemble.\n\n4. **Tests de performance** :\n   - Ces tests évaluent les performances de l'application, comme le temps de réponse, la capacité de traitement et la stabilité sous charge. Ils sont utilisés pour identifier les goulots d'étranglement et optimiser les performances.\n\n\nEn utilisant ces différents types de tests, les entreprises peuvent s'assurer que leurs applications sont robustes, performantes et répondent aux attentes des utilisateurs.\n\n\n# <InternalPageTitle> Quels tests réaliser pour le Projet CAE ? </InternalPageTitle>\n\nNous allons considérer les tests suivants pour le Projet CAE.\nNous souhaitons garantir la qualité des applications développées pour le Projet CAE sans pour autant ralentir le processus de développement en imposant une couverture de code de 100% par des tests. \n\nVoici les tests que nous réaliserons :\n1. **Tests unitaires** : \n   - Pour le frontend : Tester les composants React qui sont \"intelligents\", les hooks, les services et les fonctions utilitaires. On ne teste donc pas les composants \"présentationnels\" qui ne contiennent pas de logique métier. On teste la gestion de l'état.\n   - Pour l'API : On teste les services qui contiennent la logique métier. \n2. **Tests d'intégration** : \n   - Pour l'API : On test chaque endpoint de l'API pour vérifier que les données sont correctement récupérées et modifiées. \n   - Cela permet d'assurer que l'API fonctionne correctement avant de la connecter au frontend.\n   - On ne réalise pas d'autres tests d'intégration particuliers pour le Projet CAE. Les tests E2E couvrent déjà les interactions entre les différentes parties de l'application.\n3. **Tests E2E** :\n   - On réalise des tests E2E pour vérifier le bon fonctionnement de l'application dans son ensemble. \n   - On teste les scénarios utilisateurs les plus importants notamment pour automatiser la présentation des fonctionnalités au client.\n4. **Tests de performance** :\n   - Selon l'avancement du projet, il est possible que l'on réalise des tests de performance pour évaluer la réactivité de l'application et sa capacité à supporter un grand nombre d'utilisateurs simultanés. \n\n\n\n\n\n\n","code":"var Component=(()=>{var g=Object.create;var d=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var q=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var C=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),P=(t,e)=>{for(var i in e)d(t,i,{get:e[i],enumerable:!0})},c=(t,e,i,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of v(e))!b.call(t,s)&&s!==i&&d(t,s,{get:()=>e[s],enumerable:!(r=f(e,s))||r.enumerable});return t};var I=(t,e,i)=>(i=t!=null?g(q(t)):{},c(e||!t||!t.__esModule?d(i,\"default\",{value:t,enumerable:!0}):i,t)),E=t=>c(d({},\"__esModule\",{value:!0}),t);var p=C((y,u)=>{u.exports=_jsx_runtime});var j={};P(j,{default:()=>h,frontmatter:()=>x});var n=I(p()),x={title:\"Qualit\\xE9 g\\xE9n\\xE9rale\",description:\"Qualit\\xE9 g\\xE9n\\xE9rale des applications d'entreprise\",date:\"20/01/2025\"};function m(t){let e={h1:\"h1\",li:\"li\",ol:\"ol\",p:\"p\",strong:\"strong\",ul:\"ul\",...t.components},{InternalPageMenu:i,InternalPageMenuItem:r,InternalPageTitle:s,PathViewer:a,PathViewerItem:o}=e;return i||l(\"InternalPageMenu\",!0),r||l(\"InternalPageMenuItem\",!0),s||l(\"InternalPageTitle\",!0),a||l(\"PathViewer\",!0),o||l(\"PathViewerItem\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i,{children:[(0,n.jsxs)(a,{children:[(0,n.jsx)(o,{to:\"/\",children:\" CAE \"}),(0,n.jsx)(o,{to:\"/quality\",children:\" Qualit\\xE9 \"}),(0,n.jsx)(o,{selected:!0,children:\" Qualit\\xE9 g\\xE9n\\xE9rale \"})]}),(0,n.jsx)(r,{children:\" Comment g\\xE9rer la qualit\\xE9 des applications d'entreprise ? \"}),(0,n.jsx)(r,{children:\" Quels sont les diff\\xE9rents types de tests ? \"}),(0,n.jsx)(r,{children:\" Quels tests r\\xE9aliser pour le Projet CAE ? \"})]}),`\n`,(0,n.jsx)(e.h1,{children:(0,n.jsx)(s,{children:\" Comment g\\xE9rer la qualit\\xE9 des applications d'entreprise ? \"})}),`\n`,(0,n.jsx)(e.p,{children:\"La gestion de la qualit\\xE9 des applications d'entreprise est essentielle pour garantir leur fiabilit\\xE9, performance et s\\xE9curit\\xE9. Voici quelques pratiques cl\\xE9s pour g\\xE9rer la qualit\\xE9 :\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Int\\xE9gration Continue (CI)\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Automatisation des tests\"}),\" : Utiliser des outils de CI pour automatiser l'ex\\xE9cution des tests unitaires, d'int\\xE9gration et fonctionnels \\xE0 chaque \",(0,n.jsx)(e.strong,{children:\"modification significative\"}),\" du code. Cela permet de d\\xE9tecter rapidement les r\\xE9gressions et les erreurs.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Build automatis\\xE9\"}),\" : Configurer des pipelines de build automatis\\xE9s pour compiler et tester le code \\xE0 chaque commit ou chaque push. Cela garantit que le code est toujours dans un \\xE9tat d\\xE9ployable.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Analyse de code statique\"}),\" : Int\\xE9grer des outils d'analyse de code statique pour v\\xE9rifier la qualit\\xE9 du code, d\\xE9tecter les vuln\\xE9rabilit\\xE9s de s\\xE9curit\\xE9 et appliquer les normes de codage.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"D\\xE9ploiement Continu (CD)\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Automatisation du d\\xE9ploiement\"}),\" : Utiliser des pipelines de CD pour automatiser le d\\xE9ploiement des applications dans diff\\xE9rents environnements (d\\xE9veloppement, test ou staging, production). Cela r\\xE9duit les erreurs humaines et acc\\xE9l\\xE8re le processus de d\\xE9ploiement.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"D\\xE9ploiements incr\\xE9mentiels\"}),` : Mettre en \\u0153uvre des strat\\xE9gies de d\\xE9ploiement incr\\xE9mentiel, telles que les d\\xE9ploiements vers deux environnements (staging & production), pour minimiser les risques et assurer une transition en douceur vers les nouvelles versions.\nPar exemple, on ne d\\xE9ploie pas directement en production, mais on d\\xE9ploie d'abord en staging, on teste, et si tout est OK, on d\\xE9ploie en production.`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Surveillance et feedback\"}),\" : Mettre en place des outils de surveillance pour suivre les performances et la disponibilit\\xE9 des applications en production. Utiliser les feedbacks pour identifier et r\\xE9soudre rapidement les probl\\xE8mes.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Revue de code et collaboration\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Revue de code\"}),\" : Encourager les revues de code entre pairs pour am\\xE9liorer la qualit\\xE9 du code, partager les connaissances et d\\xE9tecter les probl\\xE8mes potentiels avant qu'ils n'atteignent la production.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Collaboration\"}),\" : Utiliser des outils de gestion de projet et de collaboration pour faciliter la communication entre les \\xE9quipes de d\\xE9veloppement, de test et d'exploitation.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Documentation et formation\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Documentation\"}),\" : Maintenir une documentation \\xE0 jour sur les processus de d\\xE9veloppement, les normes de codage, les configurations des environnements et les proc\\xE9dures de d\\xE9ploiement.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Formation continue\"}),\" : Offrir des formations r\\xE9guli\\xE8res aux d\\xE9veloppeurs sur les meilleures pratiques de d\\xE9veloppement, les nouvelles technologies et les outils de qualit\\xE9.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"En mettant en \\u0153uvre ces pratiques, les entreprises peuvent am\\xE9liorer la qualit\\xE9 de leurs applications, r\\xE9duire les risques et assurer une livraison continue de valeur \\xE0 leurs utilisateurs.\"}),`\n`,(0,n.jsx)(e.h1,{children:(0,n.jsx)(s,{children:\" Quels sont les diff\\xE9rents types de tests ? \"})}),`\n`,(0,n.jsx)(e.p,{children:\"Les tests sont une composante essentielle de la gestion de la qualit\\xE9 des applications d'entreprise. Voici les diff\\xE9rents types de tests couramment utilis\\xE9s dans le d\\xE9veloppement logiciel :\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Tests unitaires\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Ces tests v\\xE9rifient le bon fonctionnement des plus petites unit\\xE9s de code, comme les fonctions ou les m\\xE9thodes. Ils sont g\\xE9n\\xE9ralement \\xE9crits par les d\\xE9veloppeurs et ex\\xE9cut\\xE9s fr\\xE9quemment pour d\\xE9tecter les r\\xE9gressions rapidement.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Tests d'int\\xE9gration\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Ces tests v\\xE9rifient que les diff\\xE9rentes unit\\xE9s de code fonctionnent correctement ensemble. Ils sont utilis\\xE9s pour d\\xE9tecter les probl\\xE8mes d'interaction entre les modules ou les composants.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Tests de bout en bout (E2E)\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Ces tests v\\xE9rifient le bon fonctionnement de l'application dans son ensemble, du d\\xE9but \\xE0 la fin. Ils simulent les actions des utilisateurs et v\\xE9rifient que toutes les parties de l'application fonctionnent correctement ensemble.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Tests de performance\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Ces tests \\xE9valuent les performances de l'application, comme le temps de r\\xE9ponse, la capacit\\xE9 de traitement et la stabilit\\xE9 sous charge. Ils sont utilis\\xE9s pour identifier les goulots d'\\xE9tranglement et optimiser les performances.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"En utilisant ces diff\\xE9rents types de tests, les entreprises peuvent s'assurer que leurs applications sont robustes, performantes et r\\xE9pondent aux attentes des utilisateurs.\"}),`\n`,(0,n.jsx)(e.h1,{children:(0,n.jsx)(s,{children:\" Quels tests r\\xE9aliser pour le Projet CAE ? \"})}),`\n`,(0,n.jsx)(e.p,{children:`Nous allons consid\\xE9rer les tests suivants pour le Projet CAE.\nNous souhaitons garantir la qualit\\xE9 des applications d\\xE9velopp\\xE9es pour le Projet CAE sans pour autant ralentir le processus de d\\xE9veloppement en imposant une couverture de code de 100% par des tests.`}),`\n`,(0,n.jsx)(e.p,{children:\"Voici les tests que nous r\\xE9aliserons :\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Tests unitaires\"}),\" :\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:`Pour le frontend : Tester les composants React qui sont \"intelligents\", les hooks, les services et les fonctions utilitaires. On ne teste donc pas les composants \"pr\\xE9sentationnels\" qui ne contiennent pas de logique m\\xE9tier. On teste la gestion de l'\\xE9tat.`}),`\n`,(0,n.jsx)(e.li,{children:\"Pour l'API : On teste les services qui contiennent la logique m\\xE9tier.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Tests d'int\\xE9gration\"}),\" :\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Pour l'API : On test chaque endpoint de l'API pour v\\xE9rifier que les donn\\xE9es sont correctement r\\xE9cup\\xE9r\\xE9es et modifi\\xE9es.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Cela permet d'assurer que l'API fonctionne correctement avant de la connecter au frontend.\"}),`\n`,(0,n.jsx)(e.li,{children:\"On ne r\\xE9alise pas d'autres tests d'int\\xE9gration particuliers pour le Projet CAE. Les tests E2E couvrent d\\xE9j\\xE0 les interactions entre les diff\\xE9rentes parties de l'application.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Tests E2E\"}),\" :\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"On r\\xE9alise des tests E2E pour v\\xE9rifier le bon fonctionnement de l'application dans son ensemble.\"}),`\n`,(0,n.jsx)(e.li,{children:\"On teste les sc\\xE9narios utilisateurs les plus importants notamment pour automatiser la pr\\xE9sentation des fonctionnalit\\xE9s au client.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Tests de performance\"}),\" :\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Selon l'avancement du projet, il est possible que l'on r\\xE9alise des tests de performance pour \\xE9valuer la r\\xE9activit\\xE9 de l'application et sa capacit\\xE9 \\xE0 supporter un grand nombre d'utilisateurs simultan\\xE9s.\"}),`\n`]}),`\n`]}),`\n`]})]})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(m,{...t})}):m(t)}function l(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return E(j);})();\n;return Component;"},"_id":"quality/general.mdx","_raw":{"sourceFilePath":"quality/general.mdx","sourceFileName":"general.mdx","sourceFileDir":"quality","contentType":"mdx","flattenedPath":"quality/general"},"type":"Page"},"body":"var Component=(()=>{var g=Object.create;var d=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var q=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var C=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),P=(t,e)=>{for(var i in e)d(t,i,{get:e[i],enumerable:!0})},c=(t,e,i,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of v(e))!b.call(t,s)&&s!==i&&d(t,s,{get:()=>e[s],enumerable:!(r=f(e,s))||r.enumerable});return t};var I=(t,e,i)=>(i=t!=null?g(q(t)):{},c(e||!t||!t.__esModule?d(i,\"default\",{value:t,enumerable:!0}):i,t)),E=t=>c(d({},\"__esModule\",{value:!0}),t);var p=C((y,u)=>{u.exports=_jsx_runtime});var j={};P(j,{default:()=>h,frontmatter:()=>x});var n=I(p()),x={title:\"Qualit\\xE9 g\\xE9n\\xE9rale\",description:\"Qualit\\xE9 g\\xE9n\\xE9rale des applications d'entreprise\",date:\"20/01/2025\"};function m(t){let e={h1:\"h1\",li:\"li\",ol:\"ol\",p:\"p\",strong:\"strong\",ul:\"ul\",...t.components},{InternalPageMenu:i,InternalPageMenuItem:r,InternalPageTitle:s,PathViewer:a,PathViewerItem:o}=e;return i||l(\"InternalPageMenu\",!0),r||l(\"InternalPageMenuItem\",!0),s||l(\"InternalPageTitle\",!0),a||l(\"PathViewer\",!0),o||l(\"PathViewerItem\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i,{children:[(0,n.jsxs)(a,{children:[(0,n.jsx)(o,{to:\"/\",children:\" CAE \"}),(0,n.jsx)(o,{to:\"/quality\",children:\" Qualit\\xE9 \"}),(0,n.jsx)(o,{selected:!0,children:\" Qualit\\xE9 g\\xE9n\\xE9rale \"})]}),(0,n.jsx)(r,{children:\" Comment g\\xE9rer la qualit\\xE9 des applications d'entreprise ? \"}),(0,n.jsx)(r,{children:\" Quels sont les diff\\xE9rents types de tests ? \"}),(0,n.jsx)(r,{children:\" Quels tests r\\xE9aliser pour le Projet CAE ? \"})]}),`\n`,(0,n.jsx)(e.h1,{children:(0,n.jsx)(s,{children:\" Comment g\\xE9rer la qualit\\xE9 des applications d'entreprise ? \"})}),`\n`,(0,n.jsx)(e.p,{children:\"La gestion de la qualit\\xE9 des applications d'entreprise est essentielle pour garantir leur fiabilit\\xE9, performance et s\\xE9curit\\xE9. Voici quelques pratiques cl\\xE9s pour g\\xE9rer la qualit\\xE9 :\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Int\\xE9gration Continue (CI)\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Automatisation des tests\"}),\" : Utiliser des outils de CI pour automatiser l'ex\\xE9cution des tests unitaires, d'int\\xE9gration et fonctionnels \\xE0 chaque \",(0,n.jsx)(e.strong,{children:\"modification significative\"}),\" du code. Cela permet de d\\xE9tecter rapidement les r\\xE9gressions et les erreurs.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Build automatis\\xE9\"}),\" : Configurer des pipelines de build automatis\\xE9s pour compiler et tester le code \\xE0 chaque commit ou chaque push. Cela garantit que le code est toujours dans un \\xE9tat d\\xE9ployable.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Analyse de code statique\"}),\" : Int\\xE9grer des outils d'analyse de code statique pour v\\xE9rifier la qualit\\xE9 du code, d\\xE9tecter les vuln\\xE9rabilit\\xE9s de s\\xE9curit\\xE9 et appliquer les normes de codage.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"D\\xE9ploiement Continu (CD)\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Automatisation du d\\xE9ploiement\"}),\" : Utiliser des pipelines de CD pour automatiser le d\\xE9ploiement des applications dans diff\\xE9rents environnements (d\\xE9veloppement, test ou staging, production). Cela r\\xE9duit les erreurs humaines et acc\\xE9l\\xE8re le processus de d\\xE9ploiement.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"D\\xE9ploiements incr\\xE9mentiels\"}),` : Mettre en \\u0153uvre des strat\\xE9gies de d\\xE9ploiement incr\\xE9mentiel, telles que les d\\xE9ploiements vers deux environnements (staging & production), pour minimiser les risques et assurer une transition en douceur vers les nouvelles versions.\nPar exemple, on ne d\\xE9ploie pas directement en production, mais on d\\xE9ploie d'abord en staging, on teste, et si tout est OK, on d\\xE9ploie en production.`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Surveillance et feedback\"}),\" : Mettre en place des outils de surveillance pour suivre les performances et la disponibilit\\xE9 des applications en production. Utiliser les feedbacks pour identifier et r\\xE9soudre rapidement les probl\\xE8mes.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Revue de code et collaboration\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Revue de code\"}),\" : Encourager les revues de code entre pairs pour am\\xE9liorer la qualit\\xE9 du code, partager les connaissances et d\\xE9tecter les probl\\xE8mes potentiels avant qu'ils n'atteignent la production.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Collaboration\"}),\" : Utiliser des outils de gestion de projet et de collaboration pour faciliter la communication entre les \\xE9quipes de d\\xE9veloppement, de test et d'exploitation.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Documentation et formation\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Documentation\"}),\" : Maintenir une documentation \\xE0 jour sur les processus de d\\xE9veloppement, les normes de codage, les configurations des environnements et les proc\\xE9dures de d\\xE9ploiement.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Formation continue\"}),\" : Offrir des formations r\\xE9guli\\xE8res aux d\\xE9veloppeurs sur les meilleures pratiques de d\\xE9veloppement, les nouvelles technologies et les outils de qualit\\xE9.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"En mettant en \\u0153uvre ces pratiques, les entreprises peuvent am\\xE9liorer la qualit\\xE9 de leurs applications, r\\xE9duire les risques et assurer une livraison continue de valeur \\xE0 leurs utilisateurs.\"}),`\n`,(0,n.jsx)(e.h1,{children:(0,n.jsx)(s,{children:\" Quels sont les diff\\xE9rents types de tests ? \"})}),`\n`,(0,n.jsx)(e.p,{children:\"Les tests sont une composante essentielle de la gestion de la qualit\\xE9 des applications d'entreprise. Voici les diff\\xE9rents types de tests couramment utilis\\xE9s dans le d\\xE9veloppement logiciel :\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Tests unitaires\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Ces tests v\\xE9rifient le bon fonctionnement des plus petites unit\\xE9s de code, comme les fonctions ou les m\\xE9thodes. Ils sont g\\xE9n\\xE9ralement \\xE9crits par les d\\xE9veloppeurs et ex\\xE9cut\\xE9s fr\\xE9quemment pour d\\xE9tecter les r\\xE9gressions rapidement.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Tests d'int\\xE9gration\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Ces tests v\\xE9rifient que les diff\\xE9rentes unit\\xE9s de code fonctionnent correctement ensemble. Ils sont utilis\\xE9s pour d\\xE9tecter les probl\\xE8mes d'interaction entre les modules ou les composants.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Tests de bout en bout (E2E)\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Ces tests v\\xE9rifient le bon fonctionnement de l'application dans son ensemble, du d\\xE9but \\xE0 la fin. Ils simulent les actions des utilisateurs et v\\xE9rifient que toutes les parties de l'application fonctionnent correctement ensemble.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Tests de performance\"}),\" :\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Ces tests \\xE9valuent les performances de l'application, comme le temps de r\\xE9ponse, la capacit\\xE9 de traitement et la stabilit\\xE9 sous charge. Ils sont utilis\\xE9s pour identifier les goulots d'\\xE9tranglement et optimiser les performances.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"En utilisant ces diff\\xE9rents types de tests, les entreprises peuvent s'assurer que leurs applications sont robustes, performantes et r\\xE9pondent aux attentes des utilisateurs.\"}),`\n`,(0,n.jsx)(e.h1,{children:(0,n.jsx)(s,{children:\" Quels tests r\\xE9aliser pour le Projet CAE ? \"})}),`\n`,(0,n.jsx)(e.p,{children:`Nous allons consid\\xE9rer les tests suivants pour le Projet CAE.\nNous souhaitons garantir la qualit\\xE9 des applications d\\xE9velopp\\xE9es pour le Projet CAE sans pour autant ralentir le processus de d\\xE9veloppement en imposant une couverture de code de 100% par des tests.`}),`\n`,(0,n.jsx)(e.p,{children:\"Voici les tests que nous r\\xE9aliserons :\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Tests unitaires\"}),\" :\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:`Pour le frontend : Tester les composants React qui sont \"intelligents\", les hooks, les services et les fonctions utilitaires. On ne teste donc pas les composants \"pr\\xE9sentationnels\" qui ne contiennent pas de logique m\\xE9tier. On teste la gestion de l'\\xE9tat.`}),`\n`,(0,n.jsx)(e.li,{children:\"Pour l'API : On teste les services qui contiennent la logique m\\xE9tier.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Tests d'int\\xE9gration\"}),\" :\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Pour l'API : On test chaque endpoint de l'API pour v\\xE9rifier que les donn\\xE9es sont correctement r\\xE9cup\\xE9r\\xE9es et modifi\\xE9es.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Cela permet d'assurer que l'API fonctionne correctement avant de la connecter au frontend.\"}),`\n`,(0,n.jsx)(e.li,{children:\"On ne r\\xE9alise pas d'autres tests d'int\\xE9gration particuliers pour le Projet CAE. Les tests E2E couvrent d\\xE9j\\xE0 les interactions entre les diff\\xE9rentes parties de l'application.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Tests E2E\"}),\" :\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"On r\\xE9alise des tests E2E pour v\\xE9rifier le bon fonctionnement de l'application dans son ensemble.\"}),`\n`,(0,n.jsx)(e.li,{children:\"On teste les sc\\xE9narios utilisateurs les plus importants notamment pour automatiser la pr\\xE9sentation des fonctionnalit\\xE9s au client.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Tests de performance\"}),\" :\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Selon l'avancement du projet, il est possible que l'on r\\xE9alise des tests de performance pour \\xE9valuer la r\\xE9activit\\xE9 de l'application et sa capacit\\xE9 \\xE0 supporter un grand nombre d'utilisateurs simultan\\xE9s.\"}),`\n`]}),`\n`]}),`\n`]})]})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(m,{...t})}):m(t)}function l(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return E(j);})();\n;return Component;"},"__N_SSG":true}